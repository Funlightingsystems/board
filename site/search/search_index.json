{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Board repo Structure Please visit the respective pages using the nav menu above. New pages are added frequently, please look at the updated pages as they come out. Please ensure that you are using the proper version for the platform you have to avoid any errors.","title":"Home"},{"location":"#welcome-to-the-board-repo","text":"","title":"Welcome to the Board repo"},{"location":"#structure","text":"Please visit the respective pages using the nav menu above. New pages are added frequently, please look at the updated pages as they come out. Please ensure that you are using the proper version for the platform you have to avoid any errors.","title":"Structure"},{"location":"configuration-software/","text":"The web based system to configure your lighting system. This system is designed to be as easy to use a possible. First Run Prerequisites: Have the board, and fixtures. Know the serial numbers of the fixtures. Have a linux based device ready for use. 3.B) A raspberry pi computer works best, just not anything below a pi 3. 3.C) Must have at least 8gb of free storage, the more the better. Instructions: SSH into the computer that you are trying to run the system on, or open up the terminal application. Type in the command git clone http://github.com/funlightingsystems/board or if you are not using the root user (will prompt for password) sudo git clone http://github.com/funlightingsystems/board After running those commands to clone the repo, install the dependencies. sudo apt-get update -y && sudo apt-get upgrade -y sudo apt-get install nodejs npm -y npm install fs ws express Once you have installed the required dependencies enter into the directory with the configuration system. cd board/'Configuration Software' To run the system please enter the command: node server.js To view the web portal enter the IP address of the computer followed by :3000, for example if the configuration utility is running on the same machine as the web browser you can enter the ip into our browser as: 127.0.0.1:3000 or localhost:3000 If it is on a different device you can access it using the ip address of the device on your local area network (LAN) 10.0.0.1:3000 If you are unsure about the IP please check your routers configuration page. Configuring curl -X POST -H \"Content-Type: application/json\" -d '{ \"serialNumber\": SerialNumber, \"patch\": \"DIMMER# OR A(button)#\", \"colour\": \"Colour setup\", \"type\": \"Type of light\" }' http://ADDRESS:3000/lights/1234 an example of this would look like so: curl -X POST -H \"Content-Type: application/json\" -d '{ \"serialNumber\": 1234, \"patch\": \"A1\", \"colour\": \"RGB\", \"type\": \"PAR Can\" }' http://localhost:3000/lights/1234 or curl -X POST -H \"Content-Type: application/json\" -d '{ \"serialNumber\": 1111, \"patch\": \"D1\", \"colour\": \"green\", \"type\": \"LED Strip\" }' http://localhost:3000/lights/1111 Before running the command please ensure that for optimal results you run it all on the same line like so. curl -X POST -H \"Content-Type: application/json\" -d '{\"serialNumber\": 1234, \"patch\": \"D1\", \"colour\": \"RGB\", \"type\": \"SomeType\"}' http://localhost:3000/lights/1234 if you are on a windows based powershell command prompt please use this modified command with a simular syntax: curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"serialNumber\\\": 1234, \\\"patch\\\": \\\"A1\\\", \\\"colour\\\": \\\"RGB\\\", \\\"type\\\": \\\"SomeType\\\"}\" http://localhost:3000/lights/1234 If everything went according to plan you should see the output: OK If inputting the lighting data is too hard, an up to date version of the configuration file will be posted from time to time, this WILL overwrite your current data if you chose to update. Do this carefully. Backup any data you want to keep. To update you can run the command \" git clone http://github.com/funlightingsystems/board.git \" from the directory immediatly outside of the directory called board. Thanks for reading this mouthful of stuff!","title":"Configuration Software"},{"location":"configuration-software/#the-web-based-system-to-configure-your-lighting-system","text":"This system is designed to be as easy to use a possible.","title":"The web based system to configure your lighting system."},{"location":"configuration-software/#first-run","text":"","title":"First Run"},{"location":"configuration-software/#prerequisites","text":"Have the board, and fixtures. Know the serial numbers of the fixtures. Have a linux based device ready for use. 3.B) A raspberry pi computer works best, just not anything below a pi 3. 3.C) Must have at least 8gb of free storage, the more the better.","title":"Prerequisites:"},{"location":"configuration-software/#instructions","text":"SSH into the computer that you are trying to run the system on, or open up the terminal application. Type in the command git clone http://github.com/funlightingsystems/board or if you are not using the root user (will prompt for password) sudo git clone http://github.com/funlightingsystems/board After running those commands to clone the repo, install the dependencies. sudo apt-get update -y && sudo apt-get upgrade -y sudo apt-get install nodejs npm -y npm install fs ws express Once you have installed the required dependencies enter into the directory with the configuration system. cd board/'Configuration Software' To run the system please enter the command: node server.js To view the web portal enter the IP address of the computer followed by :3000, for example if the configuration utility is running on the same machine as the web browser you can enter the ip into our browser as: 127.0.0.1:3000 or localhost:3000 If it is on a different device you can access it using the ip address of the device on your local area network (LAN) 10.0.0.1:3000 If you are unsure about the IP please check your routers configuration page.","title":"Instructions:"},{"location":"configuration-software/#configuring","text":"curl -X POST -H \"Content-Type: application/json\" -d '{ \"serialNumber\": SerialNumber, \"patch\": \"DIMMER# OR A(button)#\", \"colour\": \"Colour setup\", \"type\": \"Type of light\" }' http://ADDRESS:3000/lights/1234 an example of this would look like so: curl -X POST -H \"Content-Type: application/json\" -d '{ \"serialNumber\": 1234, \"patch\": \"A1\", \"colour\": \"RGB\", \"type\": \"PAR Can\" }' http://localhost:3000/lights/1234 or curl -X POST -H \"Content-Type: application/json\" -d '{ \"serialNumber\": 1111, \"patch\": \"D1\", \"colour\": \"green\", \"type\": \"LED Strip\" }' http://localhost:3000/lights/1111 Before running the command please ensure that for optimal results you run it all on the same line like so. curl -X POST -H \"Content-Type: application/json\" -d '{\"serialNumber\": 1234, \"patch\": \"D1\", \"colour\": \"RGB\", \"type\": \"SomeType\"}' http://localhost:3000/lights/1234 if you are on a windows based powershell command prompt please use this modified command with a simular syntax: curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"serialNumber\\\": 1234, \\\"patch\\\": \\\"A1\\\", \\\"colour\\\": \\\"RGB\\\", \\\"type\\\": \\\"SomeType\\\"}\" http://localhost:3000/lights/1234","title":"Configuring"},{"location":"configuration-software/#if-everything-went-according-to-plan-you-should-see-the-output","text":"OK If inputting the lighting data is too hard, an up to date version of the configuration file will be posted from time to time, this WILL overwrite your current data if you chose to update. Do this carefully. Backup any data you want to keep. To update you can run the command \" git clone http://github.com/funlightingsystems/board.git \" from the directory immediatly outside of the directory called board. Thanks for reading this mouthful of stuff!","title":"If everything went according to plan you should see the output:"},{"location":"light-communication/","text":"Light Communication Setting up Prerequisites Have the board, and fixtures. Know the serial numbers of the fixtures. Have a linux based device ready for use. Instructions: SSH into the computer that you are trying to run the system on, or open up the terminal application. Type in the command git clone http://github.com/funlightingsystems/board or if you are not using the root user (will prompt for password) sudo git clone http://github.com/funlightingsystems/board After running those commands to clone the repo, install the dependencies. sudo apt-get update -y && sudo apt-get upgrade -y sudo apt-get install nodejs npm -y npm install fs ws express Once you have installed the required dependencies enter into the directory with the configuration system. cd board/'NodeJS'/'RAW Websocket' To run the system please enter the command: node index.js The server is now setup, you should see the output: Incoming WebSocket server running on port 8080 Outgoing WebSocket server running on port 8081 You have successfully started the server, continuously let this run in the background. About The server runs by transmitting the data from the board to the lights through a websocket with the plain text protocol. This does mean that theoretically people CAN hack your shows, always plan for people trying to hack your shows. Use an isolated network with a secure password. Hardwire in devices if you have to. The transmitted data is JSON data.","title":"Light communication"},{"location":"light-communication/#light-communication","text":"","title":"Light Communication"},{"location":"light-communication/#setting-up","text":"","title":"Setting up"},{"location":"light-communication/#prerequisites","text":"Have the board, and fixtures. Know the serial numbers of the fixtures. Have a linux based device ready for use.","title":"Prerequisites"},{"location":"light-communication/#instructions","text":"SSH into the computer that you are trying to run the system on, or open up the terminal application. Type in the command git clone http://github.com/funlightingsystems/board or if you are not using the root user (will prompt for password) sudo git clone http://github.com/funlightingsystems/board After running those commands to clone the repo, install the dependencies. sudo apt-get update -y && sudo apt-get upgrade -y sudo apt-get install nodejs npm -y npm install fs ws express Once you have installed the required dependencies enter into the directory with the configuration system. cd board/'NodeJS'/'RAW Websocket' To run the system please enter the command: node index.js The server is now setup, you should see the output: Incoming WebSocket server running on port 8080 Outgoing WebSocket server running on port 8081 You have successfully started the server, continuously let this run in the background.","title":"Instructions:"},{"location":"light-communication/#about","text":"The server runs by transmitting the data from the board to the lights through a websocket with the plain text protocol. This does mean that theoretically people CAN hack your shows, always plan for people trying to hack your shows. Use an isolated network with a secure password. Hardwire in devices if you have to. The transmitted data is JSON data.","title":"About"},{"location":"showbox/","text":"Showbox About The showbox is a device based around the Raspberry Pi 3B+, designed to run all aspects of the show including lighting and communication. The system is configured to start all of the services on first boot. You can connect into the showbox using the default username and password: Username: pi Password: raspberry A wireless access point is also included the default credentials for this are: IP address: 10.3.141.1 DHCP range: 10.3.141.50 \u2014 10.3.141.254 SSID: raspi-webgui Password: ChangeMe The lighting configuration dashboard runs on port 80, If your computer is setup to point at the DNS server of the showbox or you are connected to the isolated network of the showbox you can view it by going to the addresses http://10.3.141.1/ (Configuration Utility) ws://10.3.141.1:8081/ (Communication outgoing) ws://10.3.141.1:8080/ (Communication incoming) http://10.3.141.1:5380/ (DNS configuration) Do not change the username and password, if you do, you will have to resetup your lights at the software level. DNS The showbox comes with a built in DNS server, this DNS server is provided by Technitium DNS, you can see the WebUI for Technitium by going to http://10.3.141.1:5380 in your browser, the default username and password are as follows: Username: Admin Password: Raspberry You can add more DNS records here if you want to add additional showboxes into the system. The DNS configuration should be set like so on the client machines. Server 1: 10.3.141.1 Server 2: 1.1.1.1 (Additional server 2 configurations are listed below) 8.8.8.8 8.8.4.4 9.9.9.9 A complete list of DNS servers is available here: https://www.lifewire.com/free-and-public-dns-servers-2626062 Light configuration To use the light configuration you must first visit the page itself by going to either: http://10.3.141.1/ or http://fls.board/ Once you are on that page you should be greeted with a page that looks like the following Each item should be fairly self explanatory but here is a basic breakdown. Serial number - The number used to identify your light Type - The type of light, not servicable from the webUI, check the documentation for the configuration system and use 'curl' to set it manually. Patch - The specific button on the board that the light is controlled with. Colour - Doesn't change the colour of the light, it just gives a basic representation of the colour for someone who is looking at the system. Save - Saves the configuration currently in the feilds on the website to the configuration file Load - Loads the setup for the light from the configuration file. Download config - Downloads the config file in a nice JSON format. The next portion of the configuration utility is the grid, the grid shows all of the lights currently defined in the configuration file, this can be accessed by pressing the black dot in the corner of the screen. Once you have loaded the grid view you should be met with a screen that looks like this:","title":"Showbox "},{"location":"showbox/#showbox","text":"","title":"Showbox"},{"location":"showbox/#about","text":"The showbox is a device based around the Raspberry Pi 3B+, designed to run all aspects of the show including lighting and communication. The system is configured to start all of the services on first boot. You can connect into the showbox using the default username and password: Username: pi Password: raspberry A wireless access point is also included the default credentials for this are: IP address: 10.3.141.1 DHCP range: 10.3.141.50 \u2014 10.3.141.254 SSID: raspi-webgui Password: ChangeMe The lighting configuration dashboard runs on port 80, If your computer is setup to point at the DNS server of the showbox or you are connected to the isolated network of the showbox you can view it by going to the addresses http://10.3.141.1/ (Configuration Utility) ws://10.3.141.1:8081/ (Communication outgoing) ws://10.3.141.1:8080/ (Communication incoming) http://10.3.141.1:5380/ (DNS configuration) Do not change the username and password, if you do, you will have to resetup your lights at the software level.","title":"About"},{"location":"showbox/#dns","text":"The showbox comes with a built in DNS server, this DNS server is provided by Technitium DNS, you can see the WebUI for Technitium by going to http://10.3.141.1:5380 in your browser, the default username and password are as follows: Username: Admin Password: Raspberry You can add more DNS records here if you want to add additional showboxes into the system. The DNS configuration should be set like so on the client machines. Server 1: 10.3.141.1 Server 2: 1.1.1.1 (Additional server 2 configurations are listed below) 8.8.8.8 8.8.4.4 9.9.9.9 A complete list of DNS servers is available here: https://www.lifewire.com/free-and-public-dns-servers-2626062","title":"DNS"},{"location":"showbox/#light-configuration","text":"To use the light configuration you must first visit the page itself by going to either: http://10.3.141.1/ or http://fls.board/ Once you are on that page you should be greeted with a page that looks like the following Each item should be fairly self explanatory but here is a basic breakdown. Serial number - The number used to identify your light Type - The type of light, not servicable from the webUI, check the documentation for the configuration system and use 'curl' to set it manually. Patch - The specific button on the board that the light is controlled with. Colour - Doesn't change the colour of the light, it just gives a basic representation of the colour for someone who is looking at the system. Save - Saves the configuration currently in the feilds on the website to the configuration file Load - Loads the setup for the light from the configuration file. Download config - Downloads the config file in a nice JSON format. The next portion of the configuration utility is the grid, the grid shows all of the lights currently defined in the configuration file, this can be accessed by pressing the black dot in the corner of the screen. Once you have loaded the grid view you should be met with a screen that looks like this:","title":"Light configuration"}]}